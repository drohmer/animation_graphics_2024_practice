{% set pageTitle = 'Introduction to INF585 exercises' %}
{% set tocTitle = 'Introduction' %}

{% extends "theme/template/base.html" %}


{% block content %}

<style>
    a .download {color: gray; width:100%; max-width:260px;}
    .download {padding: 2px; border-radius:10px;}
    .download:hover {border: 2px solid gray; padding:0;}
</style>

= Animation in Graphics - Introduction


== Download code base

Download any of these archive containing all the necessary codes

* - On Github: [<a href="https://github.com/drohmer/animation_graphics_2024_code"> **https://github.com/drohmer/animation_graphics_2024_code** </a>]
::[color:gray]

::
* - Or via direct archive download:
** - [<a href="https://imagecomputing.net/course/2024_gdr_igrv/animation_graphics_2024/lab_code/animation_graphics_2024_code.zip"> animation_graphics_2024_code.zip </a>]
** - [<a href="https://imagecomputing.net/course/2024_gdr_igrv/animation_graphics_2024/lab_code/animation_graphics_2024_code.tar.gz"> animation_graphics_2024_code.tar.gz </a>]


::[height:0.5em;]::

* Make sure you can compile and run the scene in  `scenes_animation_graphics_2024/00_introduction/`.
** If needed, you can follow these link::https://imagecomputing.net/cgp/compilation/index.html[detailed instructions for Installation and Compilation].

::[height:25px;]::

 __Notes on the requirements__
* - Your C++ compiler should be compatible with C++14.
* - Glad is used to load function for OpenGL 3.3.
* - GLFW is used to create a window and handle mouse/key events.
* - ImGUI is used to handle GUI.

== Introductory scene


* The first introductory scene is available in the directory `scenes_animation_graphics_2024/00_introduction/`
** - Each exercise is described as a unique program (with its own main) defined in the `scenes/` directory. 
** - A `CMakeLists.txt` is associated to each program for its compilation (+ a Makefile for Unix systems).
*** __(you need to adapt the path of the link::https://imagecomputing.net/cgp/compilation/index.html[compilation instructions] to the directory of the CMakeLists.txt for each exercise)__



::[height:25px;]::


* Once executed, you should observe a basic scene as seen below with rotating cylinder, cube, and curve __(some details may vary)__.
** - Note that the source code of the scene is fully described in the files `src/main.cpp` and `src/scene.cpp` (and `src/scene.hpp`). 
** `main.cpp` file contains common elements through all the exercises (general set up of the scene, animation loop, basic handling of the keyboard/mouse input). Usually you won't have to edit the `main.cpp`.
** `scene.cpp` and (`scene.hpp`) describe the specific content of the scene exercise. You may have to do your edit in this file.

::[text-align:center;]
videoplay::assets/introduction.mp4[width:100%; max-width:550px]
::

=== Information on the library (only general information, no exercise)

link::https://imagecomputing.net/cgp/documentation/[CGP library] provides a set of functionalities to ease 3D graphics programming such as 

* - Structure for 3D vectors and matrices (and 2D, 4D).
* - Object structure ready to be displayed with OpenGL (Meshes, lines, etc) and their associated shaders.
* - Easy and secured storage for buffers of elements.
* - 3D scene manipulation: Mouse controlled camera

::[height:0.5em;]::

Structures and functions of the library are accessible in the namespace `cgp::`

== Use of the code library


First observe the file `main.cpp`. You should recognize the general organization of the program, in particular the setup stage, and the animation loop stage. Note where the two main methods `scene.initialize()` and `scene.display_frame()` are called, and their implementation in the file `scene.cpp`. <br>

::[height:25px;]::

In the following you will only modify code in the file scene.cpp (and scene.hpp).
*  > Change the rotation (parameterized by and axis and an angle) from some of the object within the scene in the function __display_scene__.
** - The function `rotation_axis_angle(axis_of_rotation, angle_of_rotation);` generate a structure link::https://imagecomputing.net/cgp/documentation/sitemap/rotation.html[cgp::rotation_transform] from a given 3D axis (link::https://imagecomputing.net/cgp/documentation/sitemap/vec.html[cgp::vec3]) and scalar angle (float) in radians.
** - The structure link::https://imagecomputing.net/cgp/documentation/sitemap/vec.html[cgp::vec3] implements a model of 3D vector with (x,y,z) coordinates.
*** You can apply most of the basic operations between vec3 and mat3 using mathematical operators (+,-,*,/).
** - The structure link::https://imagecomputing.net/cgp/documentation/sitemap/rotation.html[rotation_transform] allowing to generate and manipulate a rotation. The rotation is stored internaly as a quaternion, and can be manipulated similarily to a matrix when applied on a vector.
** The rotation is stored in the variable "model" of a link::https://imagecomputing.net/cgp/documentation/sitemap/mesh_drawable.html[mesh_drawable] structure. __model__ stores an link::https://imagecomputing.net/cgp/documentation/sitemap/affine.html[affine transformation] which is used as uniform variable when the shape is displayed.


::[height:25px;]::

* Note that there is two type of "mesh" structures in use
::[height:1em;]::
** **- link::https://imagecomputing.net/cgp/documentation/sitemap/mesh.html[cgp::mesh]** storing buffer on data (per vertex: position, normal, uv, color, and triangle connectivity) on CPU
*** This structure allows to conveniently access to all the data defining a mesh from the C++ code. However these data are not on the GPU, so a __mesh__ cannot be directly displayed. 
::[height:1em;]::
** **- link::https://imagecomputing.net/cgp/documentation/sitemap/mesh_drawable.html[cgp::mesh_drawable]** storing VBOs associated to these buffer once sent on the GPU memory (in the sub-structure mesh_drawable_gpu_data) as well as its VAO. The structure also stores uniform parameters that are sent to the shader at every draw call. A default shader and texture id are also be stored with the structure.
*** This structure only stores the index corresponding to elements on GPU. You cannot modify individual per-vertex elements easily from this structure.

::[height:25px;]::

** Remark: a __mesh_drawable__ can be automatically generated/initialized from a __mesh__ structure in calling the construction `mesh_drawable.initialize_data_on_gpu(meshName)`. However, you cannot create a __mesh__ from a __mesh_drawable__.



=== Adding a sphere


In this first part we display a new sphere to the scene.

::[height:25px;]::

* > Add the **class variable** to scene_structure class (in the file scene.hpp)

::[margin-left:2.5em;]
code::[c++]
cgp::mesh_drawable sphere; 
code::[-]
::

* __In this example, cgp:: is optional as the header file already indicated "using cgp::mesh_drawable;" in its beginning.__

::[height:25px;]::

* > Initialize this variable in the file scene.cpp in the __initialize()__ function as a sphere of radius 0.5

::[margin-left:2.5em;]
code::[c++]
mesh sphere_mesh = mesh_primitive_sphere(0.5f);
sphere.initialize_data_on_gpu(sphere_mesh);
code::[-]
::

::[margin-left:2em;]
* (or variant: simply in one line without explicitely storing the mesh variable)
::[margin-left:2.5em;]
code::[c++]
sphere.initialize_data_on_gpu(mesh_primitive_sphere(0.5f));
code::[-]
::
::

::[height:25px;]::

* > Display this sphere in the __display_frame()__ function with the following code

::[margin-left:2.5em;]
code::[c++]
draw(sphere, environment);
code::[-]
::

::[height:25px;]::

* > Compile, run, and observe the sphere in the 3D scene.

::[height:25px;]::

* Note: You can set geometric transformation using the uniform properties of the mesh_drawable structure (reminder: uniform are parameters passed to the shaders).
** __sphere.model.translation/rotation/scaling = ... (see example on the other displayed shapes)__
* Note also that unless specified explicitely, the default shader associated to the mesh_drawable structure is used. 
* The three trasformations: translation, rotation, and scaling are simply variables that you can write on. By default, their values are respectively, (0,0,0), the identity, and 1. The content of the variables are used (as uniform values in the shader) when the draw call is used.

::[height:25px;]::

* > Add the following line before calling __draw__ on the sphere and observe that the color (as well as any other uniform parameter) can be changed through time in modifying its value at every frame.

::[margin-left:2.5em;]
code::[c++]
sphere.material.color = vec3(1+std::cos(time), 1+std::sin(time), 2.0)/2.0f;
code::[-]
::







=== Checkbox interface

We will now add a GUI checkbox (button that can be checked) to activate/deactivate the wireframe display of the sphere.

::[height:25px;]::

* > Add the following variable in the definition of the structure __struct gui_parameters__ (in the file scene.hpp) to store a boolean state indicating when the wireframe should be displayed or not

::[margin-left:2.5em;]
code::[c++]
bool display_wireframe = false;
code::[-]
::


* > In the function __display_gui()__ (in scene.cpp) add a Checkbox (handled by ImGui library) and link it (through its adress) to the variable __display_wireframe__ in adding this line of code

::[margin-left:2.5em;]
code::[c++]
ImGui::Checkbox("Wireframe", &gui.display_wireframe);
code::[-]
::

* In running the code, the checkbox should appear. Every time you select/unselect it, the value of the variable __display_wireframe__ change from true to false but doesn't change yet anything in the 3D display.

::[height:25px;]::

The last step consists in adapting the behavior of the display. 
* > Add the following code in the __display_frame__ function

::[margin-left:2.5em;]
code::[c++]
	if (gui.display_wireframe)
		draw_wireframe(sphere, environment, { 1,1,0 });
code::[-]
::

* Check that you can now interactively display the wireframe representation of the sphere.



=== Texture

Textures images can also be associated to surface <br>
__Note that the per-vertex uv coordinates need to be defined correctly to get the mapping of the image on the surface.__

::[height:25px;]::

* > Update the initialization of your __shape__ variable with the following two lines code and observe that your surface should now be textured

::[margin-left:2.5em;]
code::[c++]
// Reset the color of the shape to white (only the texture image will be seen)
shape_visual.material.color = {1,1,1};

// Load the image and associate the texture id to the structure
shape_visual.texture.load_and_initialize_texture_2d_on_gpu(project::path+"assets/squirrel.jpg");
code::[-]
::

* __Note: The variable __project::path__ is automatically filled in the beginning of the program and tries to adapt the relative path to find the assets directory. If you omit it, you need to run your executable program from the root directory (where you can find the assets/ and shaders/ directory).__

{% endblock %}